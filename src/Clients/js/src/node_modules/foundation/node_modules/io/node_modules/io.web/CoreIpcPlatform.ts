// tslint:disable: no-namespace no-internal-module

import { PlatformNotSupportedError } from 'foundation';

/* @internal */
export abstract class CoreIpcPlatform {
    public static current: CoreIpcPlatform;

    public getFullPipeName(shortName: string): string { throw void 0; }
    public pipeExists(shortName: string): Promise<boolean> { throw void 0; }
    public getDefaultDotNet(): string { throw void 0; }
    public useShellInUnitTests(): boolean { throw void 0; }
}

/* @internal */
export module CoreIpcPlatform {
    export class Auto extends CoreIpcPlatform {
        constructor() {
            super();
            this._actual = new Web();
        }

        public getFullPipeName(shortName: string): string { return this._actual.getFullPipeName(shortName); }
        public pipeExists(shortName: string): Promise<boolean> { return this._actual.pipeExists(shortName); }
        public getDefaultDotNet(): string { return this._actual.getDefaultDotNet(); }
        public useShellInUnitTests(): boolean { return this._actual.useShellInUnitTests(); }

        private readonly _actual: CoreIpcPlatform;
    }

    export class NotSupportedPlatform extends CoreIpcPlatform {
        public getFullPipeName(shortName: string): string { throw new PlatformNotSupportedError(); }
        public async pipeExists(shortName: string): Promise<boolean> { throw new PlatformNotSupportedError(); }
        public getDefaultDotNet(): string { throw new PlatformNotSupportedError(); }
        public useShellInUnitTests(): boolean { throw new PlatformNotSupportedError(); }
    }

    export class Windows extends NotSupportedPlatform { }

    export class DotNetCoreLinux extends NotSupportedPlatform { }

    export class Web extends NotSupportedPlatform { }
}

CoreIpcPlatform.current = new CoreIpcPlatform.Auto();
